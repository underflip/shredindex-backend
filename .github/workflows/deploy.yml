name: Combined CI/CD Pipeline on GCP VM

on:
  push:
    branches:
      - pulls/gcp-cloud-run-fix
jobs:
  build-backend:
    runs-on: ubuntu-latest
    environment: develop  # Specify the environment

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Create .env files
      run: |
        chmod +x .infrastructure/create_env.sh
        ./.infrastructure/create_env.sh
      env:
        APP_NAME: ${{ vars.APP_NAME }}
        APP_ENV: ${{ vars.APP_ENV }}
        APP_KEY: ${{ vars.APP_KEY }}
        APP_DEBUG: ${{ vars.APP_DEBUG }}
        APP_URL: ${{ vars.APP_URL }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_DATABASE: ${{ secrets.DB_DATABASE }}

    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/shredindex-backend:latest
        build-args: |
          OCTOBER_CMS_AUTH=${{ secrets.OCTOBER_CMS_AUTH }}
          OCTOBER_CMS_USERNAME=${{ secrets.OCTOBER_CMS_USERNAME }}
          OCTOBER_CMS_PASSWORD=${{ secrets.OCTOBER_CMS_PASSWORD }}
  deploy:
    runs-on: ubuntu-latest
    environment: develop  # Specify the environment
    needs: [build-backend]

    steps:
      - name: SSH into GCP VM instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            # Ensure Nginx is installed and running
            if ! command -v nginx &> /dev/null; then
              sudo apt update
              sudo apt install -y nginx
              sudo systemctl enable nginx
              sudo systemctl start nginx
            fi

            # Ensure Certbot is installed
            if ! command -v certbot &> /dev/null; then
              sudo apt install -y certbot python3-certbot-nginx
            fi

            # Deploy Backend
            docker pull ${{ secrets.DOCKER_USERNAME }}/shredindex-backend:latest
            if [ $(docker ps -q -f name=shredindex-backend) ]; then
              docker stop shredindex-backend
              docker rm shredindex-backend
            fi

            docker run -d --name shredindex-backend -p 8081:8081 ${{ secrets.DOCKER_USERNAME }}/shredindex-backend:latest
            
            # Clean up unused images
            docker image prune -f

            # Create Nginx virtual host configuration
            sudo mkdir -p /etc/nginx/sites-available /etc/nginx/sites-enabled

            sudo tee /etc/nginx/sites-available/shredindex-backend.conf > /dev/null <<EOT
            
            server {
                listen 80;

                server_name backend.shredindex.com;
                location / {
                    proxy_pass http://localhost:8080;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                    client_max_body_size 128M;
                }
            }
            EOT

            # Enable the virtual host configuration
            sudo ln -s /etc/nginx/sites-available/shredindex-backend.conf /etc/nginx/sites-enabled/
  
            # Test and restart Nginx to apply changes
            sudo nginx -t
            sudo systemctl restart nginx

            # Obtain SSL certificates with Certbot
            sudo certbot --nginx -d backend.shredindex.com --non-interactive --agree-tos -m thomas.andrew.hansen@gmail.com

            # Restart Nginx to apply the SSL configuration
            sudo systemctl restart nginx
